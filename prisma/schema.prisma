generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["users", "transactions", "accounting", "settings"]
}

// USERS SCHEMA
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sessions      Session[]
  customers     Customer[] 
  @@index([email])

  @@schema("users")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  @@index([userId])

  @@schema("users")
}

model Customer {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  email     String
  phone     String?
  company   String?
  invoices  Invoice[] @relation("CustomerInvoices")
  subscriptions Subscription[] @relation("CustomerSubscriptions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([email])

  @@schema("users")
}

// TRANSACTIONS SCHEMA
model Invoice {
  id           String   @id @default(uuid())
  userId       String
  customerId   String
  amount       Decimal  @db.Decimal(18,2)
  currency     String   @default("TRY")
  status       String
  dueDate      DateTime
  paidAt       DateTime?
  pdfUrl       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  payments     Payment[]
  customer     Customer @relation(fields: [customerId], references: [id], name: "CustomerInvoices")
  @@index([userId])
  @@index([customerId])
  @@index([status])

  @@schema("transactions")
}

model Payment {
  id         String   @id @default(uuid())
  userId     String
  invoiceId  String?
  amount     Decimal  @db.Decimal(18,2)
  currency   String   @default("TRY")
  status     String
  method     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoice    Invoice? @relation(fields: [invoiceId], references: [id])
  @@index([userId])
  @@index([invoiceId])
  @@index([status])

  @@schema("transactions")
}

// ACCOUNTING SCHEMA
model Subscription {
  id           String   @id @default(uuid())
  userId       String
  customerId   String
  plan         String
  price        Decimal  @db.Decimal(18,2)
  currency     String   @default("TRY")
  status       String
  startedAt    DateTime @default(now())
  endedAt      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerId], references: [id], name: "CustomerSubscriptions")
  @@index([userId])
  @@index([customerId])
  @@index([status])

  @@schema("accounting")
}

// SETTINGS SCHEMA
model File {
  id         String   @id @default(uuid())
  userId     String
  url        String
  type       String
  size       Int
  createdAt  DateTime @default(now())
  @@index([userId])

  @@schema("settings")
}

model Card {
  id           String   @id @default(uuid())
  userId       String
  brand        String
  last4        String
  expMonth     Int
  expYear      Int
  token        String
  createdAt    DateTime @default(now())
  @@index([userId])
  @@index([token])

  @@schema("settings")
}
